
# шаблон регулярки, котор соответствует картам с цифрами от 2 до 10 включительно. 
# Проверяется, что первый символ карты - число в диапозоне от 0 до 9 или 10 
NUM_CARD = /^[2-9]|10/
# шаблон регулярки, котор соответствует всем тузам 
# Проверяется, что первый символ карты - A
A_CARD = /^A/
# шаблон регулярки, котор соответствует картам с картинками 
# Проверяется, что первый символ карты - J или Q или K 
PIC_CARD = /^J|Q|K/

cards = %w(A^ 2^ 3^ 4^ 5^ 6^ 7^ 8^ 9^ 10^ J^ Q^ K^
           A<3 2<3 3<3 4<3 5<3 6<3 7<3 8<3 9<3 10<3 J<3 Q<3 K<3
           A<> 2<> 3<> 4<> 5<> 6<> 7<> 8<> 9<> 10<> J<> Q<> K<>
           A+ 2+ 3+ 4+ 5+ 6+ 7+ 8+ 9+ 10+ J+ Q+ K+)



# cards.each { |card| puts card if card.include?('2') } 

# метод чтобы получать число из слуйчайно выбранной карты
#  метод рандомно выбирает карту из массива строк cards и возвращает число в зависимости от того какая это карта
#  «картинки» (J, Q, K) - по 10, 
#  туз (А)- 1 или 11, в зависимости от того, какое значение будет ближе к 21 и что не ведет к проигрышу (сумме более 21)

rand_card = cards.sample
# обрезаем хвост у карты, чтобы получилось голое число и присваиваем переменной stripped_num
# тут '\1' - это строка на которую после обрезания заменяется значение и остается только первый символ.
stripped_num = rand_card.sub(/([2-9]|10).*/, '\1')

# puts rand_card

# !!!! тут нужно иметь в виду, что карты в колоде не бесконечные, нельзя выдавать одинаковые карты несколько раз!!
# значит нужно делать валидации: 
  # 1. создать хеши карт (колоду)
  # 2. удалять карту из колоды после того как она выдана игроку 
def take_card(rand_card)
  case rand_card
  when NUM_CARD
    #1. валидация 
    puts "#{rand_card} is num card - you get #{stripped_num} points!"
  when A_CARD
    puts "#{rand_card} is ace card - you get 1 or 10 points!"
  when PIC_CARD
    puts "#{rand_card} is pic card - you get 10 points!"
  end
end

# cards.each { |card| puts card if card.match?(NUM_CARD) } # checks if the card starts with a digit from 2 to 9 ( ^[2-9] ) or if it is equal to 10 (
